// code\tools\parse-modules\parser\module-parser.cpp generated by reflex 5.5.0 from code\tools\parse-modules\parser\module-parser.l

#define REFLEX_VERSION "5.5.0"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#undef REFLEX_OPTION_fast
#undef REFLEX_OPTION_lex
#undef REFLEX_OPTION_lexer
#undef REFLEX_OPTION_namespace
#undef REFLEX_OPTION_nodefault
#undef REFLEX_OPTION_noline
#undef REFLEX_OPTION_outfile
#undef REFLEX_OPTION_unicode

#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_namespace           Soup::ParseModules
#define REFLEX_OPTION_nodefault           true
#define REFLEX_OPTION_noline              true
#define REFLEX_OPTION_outfile             "code\\tools\\parse-modules\\parser\\module-parser.cpp"
#define REFLEX_OPTION_unicode             true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


module;

# include <iostream>
# include <chrono>
# include <optional>
# include <unordered_map>
# include <vector>

export module parse.modules:ModuleParser;
import reflex;
import :EarlyExitException;

enum class SimplifiedCppToken : int
{
    EndOfFile = 0,
    Identifier,
    NumberSign,
    LessThan,
    GreaterThan,
    Period,
    Colon,
    Semicolon,
    Module,
    Import,
    Export,
};



////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#ifndef SOUP_BUILD
#include <reflex/matcher.h>
#endif

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#ifndef SOUP_BUILD
#include <reflex/abslexer.h>
#endif

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace Soup {
namespace ParseModules {

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {
 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      // a persistent source of input, empty by default
      const reflex::Input& input = reflex::Input(),
      // optional output stream, std::cout by default
      std::ostream& os = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  // the lexer function defined by SECTION 2
  virtual int lex(void);
  // lexer functions accepting new input to scan
  int lex(const reflex::Input& input)
  {
    in(input);
    return lex();
  }
  int lex(const reflex::Input& input, std::ostream *os)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

} // namespace Soup
} // namespace ParseModules

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace Soup {
namespace ParseModules {
extern void reflex_code_INITIAL(reflex::Matcher&);
} // namespace Soup
} // namespace ParseModules

int Soup::ParseModules::Lexer::lex(void)
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              return int();
            }
            else
            {
              lexer_error("scanner jammed");
              return int();
            }
            break;
          case 1: // rule code\tools\parse-modules\parser\module-parser.l:42: {whitespace} :
{ /* ignore whitespace */ }
            break;
          case 2: // rule code\tools\parse-modules\parser\module-parser.l:43: {preprocessor} :
{ /* ignore preprocessor statements */ }
            break;
          case 3: // rule code\tools\parse-modules\parser\module-parser.l:44: {comment} :
{ /* ignore comments */ }
            break;
          case 4: // rule code\tools\parse-modules\parser\module-parser.l:45: {multiline_comment} :
{ /* ignore comments */ }
            break;
          case 5: // rule code\tools\parse-modules\parser\module-parser.l:46: {newline} :
{ /* ignore newlines */ }
            break;
          case 6: // rule code\tools\parse-modules\parser\module-parser.l:47: "import" :
return (int)SimplifiedCppToken::Import;
            break;
          case 7: // rule code\tools\parse-modules\parser\module-parser.l:48: "export" :
return (int)SimplifiedCppToken::Export;
            break;
          case 8: // rule code\tools\parse-modules\parser\module-parser.l:49: "module" :
return (int)SimplifiedCppToken::Module;
            break;
          case 9: // rule code\tools\parse-modules\parser\module-parser.l:50: "<" :
return (int)SimplifiedCppToken::LessThan;
            break;
          case 10: // rule code\tools\parse-modules\parser\module-parser.l:51: "." :
return (int)SimplifiedCppToken::Period;
            break;
          case 11: // rule code\tools\parse-modules\parser\module-parser.l:52: ":" :
return (int)SimplifiedCppToken::Colon;
            break;
          case 12: // rule code\tools\parse-modules\parser\module-parser.l:53: ";" :
return (int)SimplifiedCppToken::Semicolon;
            break;
          case 13: // rule code\tools\parse-modules\parser\module-parser.l:54: {identifier} :
return (int)SimplifiedCppToken::Identifier;
            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 3: user code                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


namespace Soup::ParseModules
{

/// <summary>
/// Gradient decent Module parser
/// </summary>
export class ModuleParser : public Lexer
{
private:
    SimplifiedCppToken _currentToken;
    SimplifiedCppToken _nextToken;
    std::vector<std::string> _result;

public:
    ModuleParser(const reflex::Input& input) :
        Lexer(input),
        _currentToken(),
        _nextToken((SimplifiedCppToken)-1),
        _result()
    {
    }

    bool TryParse()
    {
        MoveNext();

        // Check if there is an optional global module declaration
        if (TryParseOptionalGlobalModuleFragment())
        {
            // TODO: Parse global module fragment

            // Must have a module declaration
            bool isExport;
            std::string moduleName;
            if (!TryParseModuleDeclaration(isExport, moduleName))
                throw std::runtime_error("TU with global module fragment must have a module declaration");

            if (isExport)
                _result.push_back("module-interface " + moduleName);
            else
                _result.push_back("module-implementation " + moduleName);
        }
        else
        {
            // Check for optional module declarationn
            bool isExport;
            std::string moduleName;
            if (TryParseModuleDeclaration(isExport, moduleName))
            {
                if (isExport)
                    _result.push_back("module-interface " + moduleName);
                else
                    _result.push_back("module-implementation " + moduleName);
            }
        }

        std::string importName;
        while (TryParseImportModule(importName))
        {
            _result.push_back("import " + importName);
        }

        return true;
    }

    std::vector<std::string> GetResult()
    {
      return std::move(_result);
    }

private:
    bool TryParseOptionalGlobalModuleFragment()
    {
        #ifdef SHOW_TOKENS
          std::cout << "TryParseOptionalGlobalModuleFragment" << std::endl;
        #endif

        // Verify first token is module
        if (_currentToken == SimplifiedCppToken::Module &&
          PeekNext() == SimplifiedCppToken::Semicolon)
        {
            // Move past the semicolon
            MoveNext();
            MoveNext();

            // There is a global module fragment
            return true;
        }

        return false;
    }

    bool TryParseModuleDeclaration(bool& isExport, std::string& moduleName)
    {
        #ifdef SHOW_TOKENS
          std::cout << "TryParseModuleDeclaration" << std::endl;
        #endif

        // Check for optional first export token
        bool hasExport = _currentToken == SimplifiedCppToken::Export;
        if (hasExport)
        {
            MoveNext();
        }

        // Verify required module token
        if (_currentToken != SimplifiedCppToken::Module)
        {
            // Only return false here since there is not tokens that indicate a module declaration
            return false;
        }

        MoveNext();

        std::string result;
        if (!TryParseModuleName(result))
            throw std::runtime_error("Malformed module name in module declaration");

        // Check for optional partition
        std::string partitionName;
        if (TryParseModulePartition(partitionName))
        {
            result += partitionName;
        }

        // Verify semicolon after module name
        if (_currentToken != SimplifiedCppToken::Semicolon)
            throw std::runtime_error("Malformed module declaration");

        MoveNext();

        isExport = hasExport;
        moduleName = std::move(result);
        return true;
    }

    bool TryParseModuleName(std::string& name)
    {
        #ifdef SHOW_TOKENS
          std::cout << "TryParseModuleName" << std::endl;
        #endif

        auto result = std::string();

        // Verify first token is an identifier
        if (_currentToken == SimplifiedCppToken::Identifier)
            result += str();
        else
            return false;

        // Check for optional period separators
        MoveNext();
        while (_currentToken == SimplifiedCppToken::Period)
        {
            result += str();

            // Verify required identifier
            MoveNext();
            if (_currentToken == SimplifiedCppToken::Identifier)
                result += str();
            else
                return false;

            MoveNext();
        }

        name = std::move(result);
        return true;
    }

    bool TryParseModulePartition(std::string& name)
    {
        #ifdef SHOW_TOKENS
          std::cout << "TryParseModulePartition" << std::endl;
        #endif

        // Verify first token is a colon
        if (_currentToken != SimplifiedCppToken::Colon)
            return false;

        MoveNext();
        auto moduleName = std::string();
        if (!TryParseModuleName(moduleName))
          return false;

        auto result = std::string(":");
        result += moduleName;
        name = std::move(result);
        return true;
    }

    bool TryParseHeaderName(std::string& name)
    {
        #ifdef SHOW_TOKENS
          std::cout << "TryParseHeaderName" << std::endl;
        #endif

        // TODO: Implement header imports
        name = "TODO";
        return false;
    }

    bool TryParseImportModule(std::string& name)
    {
        #ifdef SHOW_TOKENS
          std::cout << "TryParseImportModule" << std::endl;
        #endif

        // Check for optional first export and required import
        if (_currentToken == SimplifiedCppToken::Import)
        {
        }
        else if (_currentToken == SimplifiedCppToken::Export && PeekNext() == SimplifiedCppToken::Import)
        {
            // Has Export
            MoveNext();
        }
        else
        {
          return false;
        }

        MoveNext();

        auto result = std::string();
        if (TryParseModuleName(result))
        {
            name = std::move(result);
        }
        else if (TryParseModulePartition(result))
        {
            name = std::move(result);
        }
        else if (TryParseHeaderName(result))
        {
            name = std::move(result);
        }
        else
        {
            return false;
        }

        // Verify semicolon at end
        if (_currentToken != SimplifiedCppToken::Semicolon)
            return false;

        MoveNext();

        return true;
    }

    /// Lexer exceptions.
    virtual void lexer_error(const char* message = nullptr) override
    {
        // TODO: Add check for allowed errors when in a module declaration
        // For now, allow all errors
        std::stringstream stream_message;
        stream_message << (message != NULL ? message : "lexer error") << " at " << lineno() << ":" << columno();
        throw EarlyExitException(stream_message.str());
    }

    SimplifiedCppToken PeekNext()
    {
        if (_nextToken == (SimplifiedCppToken)-1)
        {
            _nextToken = (SimplifiedCppToken)lex();
        }

        return _nextToken;
    }

    SimplifiedCppToken MoveNext()
    {
        if (_nextToken != (SimplifiedCppToken)-1)
        {
            _currentToken = _nextToken;
            _nextToken = (SimplifiedCppToken)-1;
        }
        else
        {
            _currentToken = (SimplifiedCppToken)lex();
        }

        #ifdef SHOW_TOKENS
        switch (_currentToken)
        {
            case SimplifiedCppToken::EndOfFile:
                std::cout << "Token: " << "EndOfFile" << '\n';
                break;
            case SimplifiedCppToken::Module:
                std::cout << "Token: " << "Module" << '\n';
                break;
            case SimplifiedCppToken::Export:
                std::cout << "Token: " << "Export" << '\n';
                break;
            case SimplifiedCppToken::Import:
                std::cout << "Token: " << "Import" << '\n';
                break;
            case SimplifiedCppToken::Colon:
                std::cout << "Token: " << "Colon" << '\n';
                break;
            case SimplifiedCppToken::Semicolon:
                std::cout << "Token: " << "Semicolon" << '\n';
                break;
            case SimplifiedCppToken::Period:
                std::cout << "Token: " << "Period" << '\n';
                break;
            case SimplifiedCppToken::Identifier:
                std::cout << "Token: " << "Identifier" << '\n';
                break;
            default:
                std::cout << "Token: " << "UNKNOWN" << '\n';
                break;
        }
        #endif

        return _currentToken;
    }
};

}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#ifndef SOUP_BUILD
#include <reflex/matcher.h>
#endif

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

namespace Soup {
namespace ParseModules {

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c = 0;
  m.FSM_INIT(c);

// S0:
  m.FSM_FIND();
  c = m.FSM_CHAR();
  if (c == 'm') goto S45;
  if (c == 'i') goto S31;
  if (c == 'e') goto S38;
  if ('a' <= c && c <= 'z') goto S60;
  if (c == '_') goto S60;
  if ('A' <= c && c <= 'Z') goto S60;
  if (c == '<') goto S52;
  if (c == ';') goto S58;
  if (c == ':') goto S56;
  if (c == '/') goto S24;
  if (c == '.') goto S54;
  if (c == '#') goto S21;
  if (c == ' ') goto S17;
  if (c == '\r') goto S27;
  if (c == '\n') goto S29;
  if (c == '\t') goto S17;
  return m.FSM_HALT(c);

S17:
  m.FSM_TAKE(1);
  c = m.FSM_CHAR();
  if (c == ' ') goto S17;
  if (c == '\t') goto S17;
  return m.FSM_HALT(c);

S21:
  c = m.FSM_CHAR();
  if (c == '\r') goto S66;
  if (c == '\n') goto S68;
  if (0 <= c) goto S70;
  return m.FSM_HALT(c);

S24:
  c = m.FSM_CHAR();
  if (c == '/') goto S72;
  if (c == '*') goto S75;
  return m.FSM_HALT(c);

S27:
  c = m.FSM_CHAR();
  if (c == '\n') goto S29;
  return m.FSM_HALT(c);

S29:
  m.FSM_TAKE(5);
  return m.FSM_HALT();

S31:
  m.FSM_TAKE(13);
  c = m.FSM_CHAR();
  if (c == 'm') goto S86;
  if ('a' <= c && c <= 'z') goto S60;
  if (c == '_') goto S60;
  if ('A' <= c && c <= 'Z') goto S60;
  if ('1' <= c && c <= '9') goto S60;
  return m.FSM_HALT(c);

S38:
  m.FSM_TAKE(13);
  c = m.FSM_CHAR();
  if (c == 'x') goto S93;
  if ('a' <= c && c <= 'z') goto S60;
  if (c == '_') goto S60;
  if ('A' <= c && c <= 'Z') goto S60;
  if ('1' <= c && c <= '9') goto S60;
  return m.FSM_HALT(c);

S45:
  m.FSM_TAKE(13);
  c = m.FSM_CHAR();
  if (c == 'o') goto S100;
  if ('a' <= c && c <= 'z') goto S60;
  if (c == '_') goto S60;
  if ('A' <= c && c <= 'Z') goto S60;
  if ('1' <= c && c <= '9') goto S60;
  return m.FSM_HALT(c);

S52:
  m.FSM_TAKE(9);
  return m.FSM_HALT();

S54:
  m.FSM_TAKE(10);
  return m.FSM_HALT();

S56:
  m.FSM_TAKE(11);
  return m.FSM_HALT();

S58:
  m.FSM_TAKE(12);
  return m.FSM_HALT();

S60:
  m.FSM_TAKE(13);
  c = m.FSM_CHAR();
  if ('a' <= c && c <= 'z') goto S60;
  if (c == '_') goto S60;
  if ('A' <= c && c <= 'Z') goto S60;
  if ('1' <= c && c <= '9') goto S60;
  return m.FSM_HALT(c);

S66:
  c = m.FSM_CHAR();
  if (c == '\n') goto S68;
  if (0 <= c) goto S70;
  return m.FSM_HALT(c);

S68:
  m.FSM_TAKE(2);
  return m.FSM_HALT();

S70:
  c = m.FSM_CHAR();
  if (c == '\n') goto S68;
  if (0 <= c) goto S70;
  return m.FSM_HALT(c);

S72:
  c = m.FSM_CHAR();
  if (c == '\r') goto S107;
  if (c == '\n') goto S109;
  if (0 <= c) goto S111;
  return m.FSM_HALT(c);

S75:
  c = m.FSM_CHAR();
  if (c == 244) goto S127;
  if (241 <= c && c <= 243) goto S125;
  if (c == 240) goto S123;
  if (238 <= c && c <= 239) goto S121;
  if (c == 237) goto S119;
  if (225 <= c && c <= 236) goto S117;
  if (c == 224) goto S115;
  if (194 <= c && c <= 223) goto S113;
  if (128 <= c) return m.FSM_HALT(c);
  if (c == '*') goto S129;
  if (0 <= c && c <= 127) goto S75;
  return m.FSM_HALT(c);

S86:
  m.FSM_TAKE(13);
  c = m.FSM_CHAR();
  if (c == 'p') goto S141;
  if ('a' <= c && c <= 'z') goto S60;
  if (c == '_') goto S60;
  if ('A' <= c && c <= 'Z') goto S60;
  if ('1' <= c && c <= '9') goto S60;
  return m.FSM_HALT(c);

S93:
  m.FSM_TAKE(13);
  c = m.FSM_CHAR();
  if (c == 'p') goto S148;
  if ('a' <= c && c <= 'z') goto S60;
  if (c == '_') goto S60;
  if ('A' <= c && c <= 'Z') goto S60;
  if ('1' <= c && c <= '9') goto S60;
  return m.FSM_HALT(c);

S100:
  m.FSM_TAKE(13);
  c = m.FSM_CHAR();
  if (c == 'd') goto S155;
  if ('a' <= c && c <= 'z') goto S60;
  if (c == '_') goto S60;
  if ('A' <= c && c <= 'Z') goto S60;
  if ('1' <= c && c <= '9') goto S60;
  return m.FSM_HALT(c);

S107:
  c = m.FSM_CHAR();
  if (c == '\n') goto S109;
  if (0 <= c) goto S111;
  return m.FSM_HALT(c);

S109:
  m.FSM_TAKE(3);
  return m.FSM_HALT();

S111:
  c = m.FSM_CHAR();
  if (c == '\n') goto S109;
  if (0 <= c) goto S111;
  return m.FSM_HALT(c);

S113:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S75;
  return m.FSM_HALT(c);

S115:
  c = m.FSM_CHAR();
  if (160 <= c && c <= 191) goto S162;
  return m.FSM_HALT(c);

S117:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S164;
  return m.FSM_HALT(c);

S119:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 159) goto S166;
  return m.FSM_HALT(c);

S121:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S168;
  return m.FSM_HALT(c);

S123:
  c = m.FSM_CHAR();
  if (144 <= c && c <= 191) goto S170;
  return m.FSM_HALT(c);

S125:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S172;
  return m.FSM_HALT(c);

S127:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 143) goto S174;
  return m.FSM_HALT(c);

S129:
  c = m.FSM_CHAR();
  if (c == 244) goto S201;
  if (241 <= c && c <= 243) goto S199;
  if (c == 240) goto S197;
  if (238 <= c && c <= 239) goto S195;
  if (c == 237) goto S193;
  if (225 <= c && c <= 236) goto S191;
  if (c == 224) goto S189;
  if (194 <= c && c <= 223) goto S187;
  if (128 <= c) return m.FSM_HALT(c);
  if (c == '/') goto S203;
  if (c == '*') goto S129;
  if (0 <= c && c <= 127) goto S176;
  return m.FSM_HALT(c);

S141:
  m.FSM_TAKE(13);
  c = m.FSM_CHAR();
  if (c == 'o') goto S205;
  if ('a' <= c && c <= 'z') goto S60;
  if (c == '_') goto S60;
  if ('A' <= c && c <= 'Z') goto S60;
  if ('1' <= c && c <= '9') goto S60;
  return m.FSM_HALT(c);

S148:
  m.FSM_TAKE(13);
  c = m.FSM_CHAR();
  if (c == 'o') goto S212;
  if ('a' <= c && c <= 'z') goto S60;
  if (c == '_') goto S60;
  if ('A' <= c && c <= 'Z') goto S60;
  if ('1' <= c && c <= '9') goto S60;
  return m.FSM_HALT(c);

S155:
  m.FSM_TAKE(13);
  c = m.FSM_CHAR();
  if (c == 'u') goto S219;
  if ('a' <= c && c <= 'z') goto S60;
  if (c == '_') goto S60;
  if ('A' <= c && c <= 'Z') goto S60;
  if ('1' <= c && c <= '9') goto S60;
  return m.FSM_HALT(c);

S162:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S75;
  return m.FSM_HALT(c);

S164:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S75;
  return m.FSM_HALT(c);

S166:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S75;
  return m.FSM_HALT(c);

S168:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S75;
  return m.FSM_HALT(c);

S170:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S226;
  return m.FSM_HALT(c);

S172:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S228;
  return m.FSM_HALT(c);

S174:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S230;
  return m.FSM_HALT(c);

S176:
  c = m.FSM_CHAR();
  if (c == 244) goto S246;
  if (241 <= c && c <= 243) goto S244;
  if (c == 240) goto S242;
  if (238 <= c && c <= 239) goto S240;
  if (c == 237) goto S238;
  if (225 <= c && c <= 236) goto S236;
  if (c == 224) goto S234;
  if (194 <= c && c <= 223) goto S232;
  if (128 <= c) return m.FSM_HALT(c);
  if (c == '*') goto S248;
  if (0 <= c && c <= 127) goto S176;
  return m.FSM_HALT(c);

S187:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S176;
  return m.FSM_HALT(c);

S189:
  c = m.FSM_CHAR();
  if (160 <= c && c <= 191) goto S260;
  return m.FSM_HALT(c);

S191:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S262;
  return m.FSM_HALT(c);

S193:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 159) goto S264;
  return m.FSM_HALT(c);

S195:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S266;
  return m.FSM_HALT(c);

S197:
  c = m.FSM_CHAR();
  if (144 <= c && c <= 191) goto S268;
  return m.FSM_HALT(c);

S199:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S270;
  return m.FSM_HALT(c);

S201:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 143) goto S272;
  return m.FSM_HALT(c);

S203:
  m.FSM_TAKE(4);
  return m.FSM_HALT();

S205:
  m.FSM_TAKE(13);
  c = m.FSM_CHAR();
  if (c == 'r') goto S274;
  if ('a' <= c && c <= 'z') goto S60;
  if (c == '_') goto S60;
  if ('A' <= c && c <= 'Z') goto S60;
  if ('1' <= c && c <= '9') goto S60;
  return m.FSM_HALT(c);

S212:
  m.FSM_TAKE(13);
  c = m.FSM_CHAR();
  if (c == 'r') goto S281;
  if ('a' <= c && c <= 'z') goto S60;
  if (c == '_') goto S60;
  if ('A' <= c && c <= 'Z') goto S60;
  if ('1' <= c && c <= '9') goto S60;
  return m.FSM_HALT(c);

S219:
  m.FSM_TAKE(13);
  c = m.FSM_CHAR();
  if (c == 'l') goto S288;
  if ('a' <= c && c <= 'z') goto S60;
  if (c == '_') goto S60;
  if ('A' <= c && c <= 'Z') goto S60;
  if ('1' <= c && c <= '9') goto S60;
  return m.FSM_HALT(c);

S226:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S75;
  return m.FSM_HALT(c);

S228:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S75;
  return m.FSM_HALT(c);

S230:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S75;
  return m.FSM_HALT(c);

S232:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S176;
  return m.FSM_HALT(c);

S234:
  c = m.FSM_CHAR();
  if (160 <= c && c <= 191) goto S295;
  return m.FSM_HALT(c);

S236:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S297;
  return m.FSM_HALT(c);

S238:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 159) goto S299;
  return m.FSM_HALT(c);

S240:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S301;
  return m.FSM_HALT(c);

S242:
  c = m.FSM_CHAR();
  if (144 <= c && c <= 191) goto S303;
  return m.FSM_HALT(c);

S244:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S305;
  return m.FSM_HALT(c);

S246:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 143) goto S307;
  return m.FSM_HALT(c);

S248:
  c = m.FSM_CHAR();
  if (c == 244) goto S201;
  if (241 <= c && c <= 243) goto S199;
  if (c == 240) goto S197;
  if (238 <= c && c <= 239) goto S195;
  if (c == 237) goto S193;
  if (225 <= c && c <= 236) goto S191;
  if (c == 224) goto S189;
  if (194 <= c && c <= 223) goto S187;
  if (128 <= c) return m.FSM_HALT(c);
  if (c == '/') goto S203;
  if (c == '*') goto S248;
  if (0 <= c && c <= 127) goto S176;
  return m.FSM_HALT(c);

S260:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S176;
  return m.FSM_HALT(c);

S262:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S176;
  return m.FSM_HALT(c);

S264:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S176;
  return m.FSM_HALT(c);

S266:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S176;
  return m.FSM_HALT(c);

S268:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S309;
  return m.FSM_HALT(c);

S270:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S311;
  return m.FSM_HALT(c);

S272:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S313;
  return m.FSM_HALT(c);

S274:
  m.FSM_TAKE(13);
  c = m.FSM_CHAR();
  if (c == 't') goto S315;
  if ('a' <= c && c <= 'z') goto S60;
  if (c == '_') goto S60;
  if ('A' <= c && c <= 'Z') goto S60;
  if ('1' <= c && c <= '9') goto S60;
  return m.FSM_HALT(c);

S281:
  m.FSM_TAKE(13);
  c = m.FSM_CHAR();
  if (c == 't') goto S321;
  if ('a' <= c && c <= 'z') goto S60;
  if (c == '_') goto S60;
  if ('A' <= c && c <= 'Z') goto S60;
  if ('1' <= c && c <= '9') goto S60;
  return m.FSM_HALT(c);

S288:
  m.FSM_TAKE(13);
  c = m.FSM_CHAR();
  if (c == 'e') goto S327;
  if ('a' <= c && c <= 'z') goto S60;
  if (c == '_') goto S60;
  if ('A' <= c && c <= 'Z') goto S60;
  if ('1' <= c && c <= '9') goto S60;
  return m.FSM_HALT(c);

S295:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S176;
  return m.FSM_HALT(c);

S297:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S176;
  return m.FSM_HALT(c);

S299:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S176;
  return m.FSM_HALT(c);

S301:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S176;
  return m.FSM_HALT(c);

S303:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S333;
  return m.FSM_HALT(c);

S305:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S335;
  return m.FSM_HALT(c);

S307:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S337;
  return m.FSM_HALT(c);

S309:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S176;
  return m.FSM_HALT(c);

S311:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S176;
  return m.FSM_HALT(c);

S313:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S176;
  return m.FSM_HALT(c);

S315:
  m.FSM_TAKE(6);
  c = m.FSM_CHAR();
  if ('a' <= c && c <= 'z') goto S60;
  if (c == '_') goto S60;
  if ('A' <= c && c <= 'Z') goto S60;
  if ('1' <= c && c <= '9') goto S60;
  return m.FSM_HALT(c);

S321:
  m.FSM_TAKE(7);
  c = m.FSM_CHAR();
  if ('a' <= c && c <= 'z') goto S60;
  if (c == '_') goto S60;
  if ('A' <= c && c <= 'Z') goto S60;
  if ('1' <= c && c <= '9') goto S60;
  return m.FSM_HALT(c);

S327:
  m.FSM_TAKE(8);
  c = m.FSM_CHAR();
  if ('a' <= c && c <= 'z') goto S60;
  if (c == '_') goto S60;
  if ('A' <= c && c <= 'Z') goto S60;
  if ('1' <= c && c <= '9') goto S60;
  return m.FSM_HALT(c);

S333:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S176;
  return m.FSM_HALT(c);

S335:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S176;
  return m.FSM_HALT(c);

S337:
  c = m.FSM_CHAR();
  if (128 <= c && c <= 191) goto S176;
  return m.FSM_HALT(c);
}

} // namespace Soup

} // namespace ParseModules

